# baseURI: http://www.edmcouncil.org/skosify
# imports: http://purl.org/dc/terms/
# imports: http://spinrdf.org/spin
# imports: http://spinrdf.org/spinx
# imports: http://www.omg.org/techprocess/ab/SpecificationMetadata/
# imports: http://www.w3.org/2004/02/skos/core
# prefix: skosify

@prefix afn: <http://jena.apache.org/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix fibo-fnd-utl-av: <https://spec.edmcouncil.org/fibo/FND/Utilities/AnnotationVocabulary/> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosify: <http://www.edmcouncil.org/skosify#> .
@prefix sm: <http://www.omg.org/techprocess/ab/SpecificationMetadata/> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

afn:Select_1
  rdf:type sp:Select ;
  rdfs:label "Select 1" ;
.
afn:Select_2
  rdf:type sp:Select ;
  rdfs:label "Select 2" ;
.
arg:a1
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:a2
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:text
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
<http://www.edmcouncil.org/skosify>
  rdf:type owl:Ontology ;
  owl:imports <http://purl.org/dc/terms/> ;
  owl:imports <http://spinrdf.org/spin> ;
  owl:imports <http://spinrdf.org/spinx> ;
  owl:imports sm: ;
  owl:imports <http://www.w3.org/2004/02/skos/core> ;
.
skosify:px
  rdf:type owl:DatatypeProperty ;
  rdfs:label "px" ;
.
skosify:subs
  rdf:type spin:Function ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          (
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      rdf:type sp:replace ;
                      sp:arg1 [
                          rdf:type xsd:string ;
                          sp:arg1 [
                              sp:varName "a1" ;
                            ] ;
                        ] ;
                      sp:arg2 "(/|#)[^/#]*$" ;
                      sp:arg3 "" ;
                    ] ;
                  sp:arg2 "^.*/" ;
                  sp:arg3 "" ;
                ] ;
              sp:variable [
                  sp:varName "ont" ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      rdf:type sp:replace ;
                      sp:arg1 [
                          rdf:type sp:replace ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 [
                                  sp:varName "a1" ;
                                ] ;
                            ] ;
                          sp:arg2 "(/|#)[^/#]*$" ;
                          sp:arg3 "" ;
                        ] ;
                      sp:arg2 "/[^/]*$" ;
                      sp:arg3 "" ;
                    ] ;
                  sp:arg2 "^.*/" ;
                  sp:arg3 "" ;
                ] ;
              sp:variable [
                  sp:varName "mod" ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      rdf:type sp:replace ;
                      sp:arg1 [
                          rdf:type xsd:string ;
                          sp:arg1 [
                              sp:varName "a1" ;
                            ] ;
                        ] ;
                      sp:arg2 "^.*fibo/ontology/" ;
                      sp:arg3 "" ;
                    ] ;
                  sp:arg2 "/.*$" ;
                  sp:arg3 "" ;
                ] ;
              sp:variable [
                  sp:varName "domain" ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      rdf:type sp:replace ;
                      sp:arg1 [
                          rdf:type xsd:string ;
                          sp:arg1 [
                              sp:varName "a1" ;
                            ] ;
                        ] ;
                      sp:arg2 "^.*fibo/ontology/[^/]*/" ;
                      sp:arg3 "" ;
                    ] ;
                  sp:arg2 "/.*$" ;
                  sp:arg3 "" ;
                ] ;
              sp:variable [
                  sp:varName "subDomain" ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      rdf:type xsd:string ;
                      sp:arg1 [
                          sp:varName "a2" ;
                        ] ;
                    ] ;
                  sp:arg2 "[{]M[}]" ;
                  sp:arg3 [
                      sp:varName "mod" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "r1" ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      sp:varName "r1" ;
                    ] ;
                  sp:arg2 "[{]O[}]" ;
                  sp:arg3 [
                      sp:varName "ont" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "r2" ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      sp:varName "r2" ;
                    ] ;
                  sp:arg2 "[{]D[}]" ;
                  sp:arg3 [
                      sp:varName "domain" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "r3" ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      sp:varName "r3" ;
                    ] ;
                  sp:arg2 "[{]S[}]" ;
                  sp:arg3 [
                      sp:varName "subDomain" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "result" ;
                ] ;
            ]
          )
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:a1 ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:a2 ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Substitute keys from Domain, Module and Ontology into a given URL" ;
  rdfs:label "subs" ;
  rdfs:subClassOf spin:Functions ;
.
rdf:Property
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "subject" ;
              ] ;
            sp:predicate [
                sp:varName "predicate2" ;
              ] ;
            sp:subject [
                sp:varName "object" ;
              ] ;
          ]
          [
            sp:object "Rule11 S" ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            sp:object "Rule 11 O" ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "object" ;
              ] ;
          ]
        ) ;
      sp:text """# Rule 11
CONSTRUCT {
    ?object ?predicate2 ?subject .
    ?subject skos:historyNote \"Rule11 S\" .
    ?object skos:historyNote \"Rule 11 O\" .
}
WHERE {
    ?pp a owl:ObjectProperty .
    ?pp skos:historyNote ?hn .
    FILTER regex(?hn, \"^Rule\") . 
    ?subject ?pp ?object .
    ?predicate2 owl:inverseOf ?pp .
}""" ;
      sp:where (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pp" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "hn" ;
              ] ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "pp" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    sp:varName "hn" ;
                  ] ;
                sp:arg2 "^Rule" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "pp" ;
              ] ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pp" ;
              ] ;
            sp:predicate owl:inverseOf ;
            sp:subject [
                sp:varName "predicate2" ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 11" ;
    ] ;
.
owl:Class
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object skos:Concept ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
        ) ;
      sp:text """# Classes and Datatypes become Concepts
CONSTRUCT {
    ?skentity a skos:Concept .
    ?skentity rdfs:isDefinedBy ?entity .
}
WHERE {
    ?entity a owl:Class .
    FILTER regex(xsd:string(?entity), \"edmcouncil\") .
    FILTER NOT EXISTS {
        ?entity owl:deprecated true . 
    } .
    skos:Concept skosify:px ?px .
    OPTIONAL {
        ?entity rdfs:label ?oldlabel .
    } .
    FILTER regex(xsd:string(?entity), \"edmc\", \"i\") .
    BIND (REPLACE(str(?entity), \"^.*(#|/)\", \"\") AS ?lentity) .
    BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(?lentity, \"”\", \"\\\"\"), \"“\", \"\\\"\"), \"–\", \"-\"), \"’\", \"'\"), \"‘\", \"'\") AS ?altlabel) .
    BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(?oldlabel, \"”\", \"\\\"\"), \"“\", \"\\\"\"), \"–\", \"-\"), \"’\", \"'\"), \"‘\", \"'\") AS ?preflabel) .
    BIND (URI(skosify:subs(?entity, CONCAT(?px, ENCODE_FOR_URI(str(?lentity))))) AS ?skentity) .
}""" ;
      sp:where (
          [
            sp:object owl:Class ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
                sp:arg2 "edmcouncil" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "entity" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px" ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "oldlabel" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "entity" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
                sp:arg2 "edmc" ;
                sp:arg3 "i" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "lentity" ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "altlabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "oldlabel" ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "preflabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "entity" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lentity" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity" ;
              ] ;
          ]
        ) ;
      rdfs:comment "Classes and Datatypes become Concepts" ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object skos:Concept ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
        ) ;
      sp:text """# Classes and Datatypes become Concepts
CONSTRUCT { 
    ?skentity a skos:Concept .
    ?skentity rdfs:isDefinedBy ?entity .
}
WHERE {
    ?entity a rdfs:Datatype .
    FILTER regex(xsd:string(?entity), \"edmcouncil\") .
    FILTER NOT EXISTS {
        ?entity owl:deprecated true .
    } .
    FILTER regex(xsd:string(?entity), \"edmcouncil\") .
    skos:Concept skosify:px ?px .
    OPTIONAL {
        ?entity rdfs:label ?oldlabel .
    } .
    BIND (REPLACE(str(?entity), \"^.*(#|/)\", \"\") AS ?lentity) .
    BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(?lentity, \"”\", \"\\\"\"), \"“\", \"\\\"\"), \"–\", \"-\"), \"’\", \"'\"), \"‘\", \"'\") AS ?altlabel) .
    BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(?oldlabel, \"”\", \"\\\"\"), \"“\", \"\\\"\"), \"–\", \"-\"), \"’\", \"'\"), \"‘\", \"'\") AS ?preflabel) .
    BIND (URI(skosify:subs(?entity, CONCAT(?px, REPLACE(ENCODE_FOR_URI(str(?lentity)), \"^.\", \"uc($0)\")))) AS ?skentity) .
}""" ;
      sp:where (
          [
            sp:object rdfs:Datatype ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
                sp:arg2 "edmcouncil" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "entity" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
                sp:arg2 "edmcouncil" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px" ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "oldlabel" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "entity" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "lentity" ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "altlabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "oldlabel" ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "preflabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "entity" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:encode_for_uri ;
                                sp:arg1 [
                                    rdf:type sp:str ;
                                    sp:arg1 [
                                        sp:varName "lentity" ;
                                      ] ;
                                  ] ;
                              ] ;
                            sp:arg2 "^." ;
                            sp:arg3 "uc($0)" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity" ;
              ] ;
          ]
        ) ;
      rdfs:comment "Classes and Datatypes become Concepts" ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "titLabel" ;
              ] ;
            sp:predicate skos:prefLabel ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
        ) ;
      sp:text """# Rule 2
CONSTRUCT {
    ?skentity skos:prefLabel ?titLabel .
    ?skentity rdfs:isDefinedBy ?entity .
}
WHERE {
    ?entity a owl:Class .
    FILTER regex(xsd:string(?entity), \"edmcouncil\") .
    FILTER NOT EXISTS {
        ?entity owl:deprecated true . 
    } .
    skos:Concept skosify:px ?px .
    FILTER (!isBlank(?entity)) .
    ?entity rdfs:label ?label .
    FILTER regex(xsd:string(?entity), \"edmc\", \"i\") .
    BIND (REPLACE(str(?entity), \"^.*(#|/)\", \"\") AS ?lentity) .
    BIND (xsd:string(COALESCE(?label, ?lentity)) AS ?prefLabel) .
    BIND (STRLANG(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(?prefLabel, \"”\", \"\\\"\"), \"“\", \"\\\"\"), \"–\", \"-\"), \"’\", \"'\"), \"‘\", \"'\"), \"( .)|(^.)\", \"uc($1$2)\"), \"en\") AS ?titLabel) .
    BIND (URI(skosify:subs(?entity, CONCAT(?px, ENCODE_FOR_URI(str(?lentity))))) AS ?skentity) .
}""" ;
      sp:where (
          [
            sp:object owl:Class ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
                sp:arg2 "edmcouncil" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "entity" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px" ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "label" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "entity" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
                sp:arg2 "edmc" ;
                sp:arg3 "i" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type xsd:string ;
                sp:arg1 [
                    rdf:type sp:coalesce ;
                    sp:arg1 [
                        sp:varName "label" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "lentity" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "prefLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            sp:varName "prefLabel" ;
                                          ] ;
                                        sp:arg2 "”" ;
                                        sp:arg3 "\"" ;
                                      ] ;
                                    sp:arg2 "“" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "–" ;
                                sp:arg3 "-" ;
                              ] ;
                            sp:arg2 "’" ;
                            sp:arg3 "'" ;
                          ] ;
                        sp:arg2 "‘" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "( .)|(^.)" ;
                    sp:arg3 "uc($1$2)" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "entity" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lentity" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity" ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 2" ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "titLabel" ;
              ] ;
            sp:predicate skos:prefLabel ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
        ) ;
      sp:text """# Rule 2
CONSTRUCT { 
    ?skentity skos:prefLabel ?titLabel .
    ?skentity rdfs:isDefinedBy ?entity .
}
WHERE {
    ?entity a rdfs:Datatype .
    FILTER regex(xsd:string(?entity), \"edmcouncil\") .
    FILTER NOT EXISTS {
        ?entity owl:deprecated true .
    } .
    skos:Concept skosify:px ?px .
    FILTER (!isBlank(?entity)) .
    OPTIONAL {
        ?entity rdfs:label ?label .
    } .
    BIND (REPLACE(str(?entity), \"^.*(#|/)\", \"\") AS ?lentity) .
    BIND (COALESCE(?label, ?lentity) AS ?prefLabel) .
    BIND (STRLANG(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(?prefLabel, \"”\", \"\\\"\"), \"“\", \"\\\"\"), \"–\", \"-\"), \"’\", \"'\"), \"‘\", \"'\"), \"( .)|(^.)\", \"uc($1$2)\"), \"en\") AS ?titLabel) .
    BIND (URI(skosify:subs(?entity, CONCAT(?px, REPLACE(ENCODE_FOR_URI(str(?lentity)), \"^.\", \"uc($0)\")))) AS ?skentity) .
}""" ;
      sp:where (
          [
            sp:object rdfs:Datatype ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
                sp:arg2 "edmcouncil" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "entity" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px" ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "label" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "entity" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:coalesce ;
                sp:arg1 [
                    sp:varName "label" ;
                  ] ;
                sp:arg2 [
                    sp:varName "lentity" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "prefLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            sp:varName "prefLabel" ;
                                          ] ;
                                        sp:arg2 "”" ;
                                        sp:arg3 "\"" ;
                                      ] ;
                                    sp:arg2 "“" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "–" ;
                                sp:arg3 "-" ;
                              ] ;
                            sp:arg2 "’" ;
                            sp:arg3 "'" ;
                          ] ;
                        sp:arg2 "‘" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "( .)|(^.)" ;
                    sp:arg3 "uc($1$2)" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "entity" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:encode_for_uri ;
                                sp:arg1 [
                                    rdf:type sp:str ;
                                    sp:arg1 [
                                        sp:varName "lentity" ;
                                      ] ;
                                  ] ;
                              ] ;
                            sp:arg2 "^." ;
                            sp:arg3 "uc($0)" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity" ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 2" ;
    ] ;
.
owl:Thing
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "predx" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "y" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "skpobject" ;
              ] ;
            sp:predicate [
                sp:varName "skpprop" ;
              ] ;
            sp:subject [
                sp:varName "skpsubject" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "s" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpsubject" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "z" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpobject" ;
              ] ;
          ]
        ) ;
      sp:text """# Rule 9
CONSTRUCT {
    ?skpprop a owl:ObjectProperty .
    ?skpprop rdfs:subPropertyOf skos:related .
    ?skpprop rdfs:label ?predx .
    ?skpprop rdfs:isDefinedBy ?y .
    ?skpsubject ?skpprop ?skpobject .
    ?skpsubject rdfs:isDefinedBy ?s . 
    ?skpobject rdfs:isDefinedBy ?z .
}
WHERE {
    skos:Concept skosify:px ?px .
    ?s rdfs:subClassOf|owl:equivalentClass ?x .
    ?x a owl:Restriction .
    ?x owl:onProperty ?y .
    ?y a owl:ObjectProperty .
    FILTER NOT EXISTS {
        ?y owl:deprecated true .
    } .
    FILTER NOT EXISTS {
        ?s owl:deprecated true .
    } .
    OPTIONAL {
        ?y rdfs:label ?yL .
    } .
    ?x ((owl:onClass|owl:someValuesFrom)|owl:allValuesFrom)|owl:onDataRange ?z .
    ?z a _:0 .
    FILTER (!isBlank(?z)) .
    BIND (REPLACE(str(?y), \"^.*(#|/)\", \"\") AS ?yStr) .
    BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(COALESCE(?yL, ?yStr), \"\", \"\\\"\"), \"\", \"\\\"\"), \"\", \"-\"), \"\", \"'\"), \"\", \"'\") AS ?predx) .
    BIND (REPLACE(str(?z), \"^.*(#|/)\", \"\") AS ?xpobject) .
    BIND (REPLACE(str(?s), \"^.*(#|/)\", \"\") AS ?xpsubject) .
    BIND (URI(skosify:subs(?z, CONCAT(?px, ENCODE_FOR_URI(str(?xpobject))))) AS ?skpobject) .
    BIND (URI(skosify:subs(?s, CONCAT(?px, ENCODE_FOR_URI(str(?xpsubject))))) AS ?skpsubject) .
    BIND (URI(skosify:subs(?y, CONCAT(?px, ENCODE_FOR_URI(str(?yStr))))) AS ?skpprop) .
    BIND (CONCAT(?xpsubject, \" <- \", \" has a restriction involving \", ?yStr, \" and \", ?xpobject) AS ?hist) .
}""" ;
      sp:where (
          [
            sp:object [
                sp:varName "px" ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:TriplePath ;
            sp:object [
                sp:varName "x" ;
              ] ;
            sp:path [
                rdf:type sp:AltPath ;
                sp:path1 rdfs:subClassOf ;
                sp:path2 owl:equivalentClass ;
              ] ;
            sp:subject [
                sp:varName "s" ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "y" ;
              ] ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "x" ;
              ] ;
          ]
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "y" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "y" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "s" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "yL" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "y" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:TriplePath ;
            sp:object [
                sp:varName "z" ;
              ] ;
            sp:path [
                rdf:type sp:AltPath ;
                sp:path1 [
                    rdf:type sp:AltPath ;
                    sp:path1 [
                        rdf:type sp:AltPath ;
                        sp:path1 owl:onClass ;
                        sp:path2 owl:someValuesFrom ;
                      ] ;
                    sp:path2 owl:allValuesFrom ;
                  ] ;
                sp:path2 owl:onDataRange ;
              ] ;
            sp:subject [
                sp:varName "x" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "z" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "z" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "y" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "yStr" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:coalesce ;
                                    sp:arg1 [
                                        sp:varName "yL" ;
                                      ] ;
                                    sp:arg2 [
                                        sp:varName "yStr" ;
                                      ] ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "predx" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "z" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "xpobject" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "s" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "xpsubject" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "z" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "xpobject" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skpobject" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "s" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "xpsubject" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skpsubject" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "y" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "yStr" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    sp:varName "xpsubject" ;
                  ] ;
                sp:arg2 " <- " ;
                sp:arg3 " has a restriction involving " ;
                sp:arg4 [
                    sp:varName "yStr" ;
                  ] ;
                sp:arg5 " and " ;
                sp:arg6 [
                    sp:varName "xpobject" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hist" ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 9" ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "predx" ;
              ] ;
            sp:predicate skos:prefLabel ;
            sp:subject [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "w" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "skpobject" ;
              ] ;
            sp:predicate [
                sp:varName "skpprop" ;
              ] ;
            sp:subject [
                sp:varName "skpsubject" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpobject" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "s" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpsubject" ;
              ] ;
          ]
        ) ;
      sp:text """# Rule 4
# It looks as if some of these are daisy-chains. Here we turn restrictions into direct links.
# This looks as if we have two branches, one for isPlayedBy and one for playsRole - why are they separate?
# I think property paths will simplify this a lot,perhaps obviating the need for the union.
CONSTRUCT {
    ?skpprop a owl:ObjectProperty .
    ?skpprop rdfs:subPropertyOf skos:related .
    ?skpprop skos:prefLabel ?predx .
    ?skpprop rdfs:isDefinedBy ?w . 
    ?skpsubject ?skpprop ?skpobject .
    ?skpobject rdfs:isDefinedBy ?p . 
    ?skpsubject rdfs:isDefinedBy ?s .
}
WHERE {
    {
        ?s rdfs:subClassOf ?x .
        skos:Concept skosify:px ?px .
        ?x a owl:Restriction .
        ?x (owl:someValuesFrom|owl:allValuesFrom)|owl:onClass ?z .
        ?x owl:onProperty ?y .
        FILTER (?y = <http://spec.edmcouncil.org/fibo/FND/Parties/Roles/isPlayedBy>) .
        OPTIONAL {
            ?y rdfs:label ?yL .
        } .
        ?z owl:onProperty ?w .
        ?z ((owl:someValuesFrom|owl:allValuesFrom)|owl:onClass)|owl:onDataRange ?p .
        FILTER (!regex(xsd:string(?p), \"vocabulary\")) .
        FILTER NOT EXISTS {
            ?s owl:deprecated true .
        } .
        FILTER (?p != owl:Thing) .
        BIND (REPLACE(str(?w), \"^.*(#|/)\", \"\") AS ?wStr) .
        BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(COALESCE(?wL, ?yStr), \"\", \"\\\"\"), \"\", \"\\\"\"), \"\", \"-\"), \"\", \"'\"), \"\", \"'\") AS ?predx) .
        BIND (REPLACE(str(?p), \"^.*(#|/)\", \"\") AS ?xpobject) .
        BIND (IF(EXISTS {
            ?parent a rdfs:Datatype .
        }, REPLACE(ENCODE_FOR_URI(str(?lparent)), \"^.\", \"uc($0)\"), ENCODE_FOR_URI(?lparent)) AS ?lcpparent) .
        BIND (REPLACE(str(?s), \"^.*(#|/)\", \"\") AS ?xpsubject) .
        BIND (URI(skosify:subs(?p, CONCAT(?px, IF(EXISTS {
            ?p a rdfs:Datatype .
        }, REPLACE(ENCODE_FOR_URI(str(?xpobject)), \"^.\", \"uc($0)\"), ENCODE_FOR_URI(str(?xpobject)))))) AS ?skpobject) .
        BIND (URI(skosify:subs(?s, CONCAT(?px, ENCODE_FOR_URI(str(?xpsubject))))) AS ?skpsubject) .
        BIND (URI(skosify:subs(?w, CONCAT(?px, ENCODE_FOR_URI(str(?wStr))))) AS ?skpprop) .
    }
    UNION
    {
        ?s rdfs:subClassOf ?x .
        skos:Concept skosify:px ?px .
        ?x a owl:Restriction .
        ?x ((owl:someValuesFrom|owl:allValuesFrom)|owl:onClass)|owl:onDataRange ?z .
        ?x owl:onProperty ?w .
        OPTIONAL {
            ?w rdfs:label ?wL .
        } .
        ?z owl:onProperty ?y .
        FILTER (?y = <http://spec.edmcouncil.org/fibo/FND/Parties/Roles/playsRole>) .
        ?z (owl:someValuesFrom|owl:allValuesFrom)|owl:onClass ?p .
        FILTER NOT EXISTS {
            ?p owl:deprecated true .
        } .
        FILTER NOT EXISTS {
            ?s owl:deprecated true .
        } .
        BIND (REPLACE(str(?w), \"^.*(#|/)\", \"\") AS ?wStr) .
        BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(COALESCE(?wL, ?yStr), \"\", \"\\\"\"), \"\", \"\\\"\"), \"\", \"-\"), \"\", \"'\"), \"\", \"'\") AS ?predx) .
        BIND (REPLACE(str(?p), \"^.*(#|/)\", \"\") AS ?xpobject) .
        BIND (REPLACE(str(?s), \"^.*(#|/)\", \"\") AS ?xpsubject) .
        BIND (URI(skosify:subs(?p, CONCAT(?px, IF(EXISTS {
            ?p a rdfs:Datatype .
        }, REPLACE(ENCODE_FOR_URI(str(?xpobject)), \"^.\", \"uc($0)\"), ENCODE_FOR_URI(str(?xpobject)))))) AS ?skpobject) .
        BIND (URI(skosify:subs(?s, CONCAT(?px, ENCODE_FOR_URI(str(?xpsubject))))) AS ?skpsubject) .
        BIND (URI(skosify:subs(?w, CONCAT(?px, ENCODE_FOR_URI(str(?wStr))))) AS ?skpprop) .
    } .
}""" ;
      sp:where (
          [
            rdf:type sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "x" ;
                      ] ;
                    sp:predicate rdfs:subClassOf ;
                    sp:subject [
                        sp:varName "s" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "px" ;
                      ] ;
                    sp:predicate skosify:px ;
                    sp:subject skos:Concept ;
                  ]
                  [
                    sp:object owl:Restriction ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "x" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:TriplePath ;
                    sp:object [
                        sp:varName "z" ;
                      ] ;
                    sp:path [
                        rdf:type sp:AltPath ;
                        sp:path1 [
                            rdf:type sp:AltPath ;
                            sp:path1 owl:someValuesFrom ;
                            sp:path2 owl:allValuesFrom ;
                          ] ;
                        sp:path2 owl:onClass ;
                      ] ;
                    sp:subject [
                        sp:varName "x" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "y" ;
                      ] ;
                    sp:predicate owl:onProperty ;
                    sp:subject [
                        sp:varName "x" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            sp:varName "y" ;
                          ] ;
                        sp:arg2 <http://spec.edmcouncil.org/fibo/FND/Parties/Roles/isPlayedBy> ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "yL" ;
                            ] ;
                          sp:predicate rdfs:label ;
                          sp:subject [
                              sp:varName "y" ;
                            ] ;
                        ]
                      ) ;
                  ]
                  [
                    sp:object [
                        sp:varName "w" ;
                      ] ;
                    sp:predicate owl:onProperty ;
                    sp:subject [
                        sp:varName "z" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:TriplePath ;
                    sp:object [
                        sp:varName "p" ;
                      ] ;
                    sp:path [
                        rdf:type sp:AltPath ;
                        sp:path1 [
                            rdf:type sp:AltPath ;
                            sp:path1 [
                                rdf:type sp:AltPath ;
                                sp:path1 owl:someValuesFrom ;
                                sp:path2 owl:allValuesFrom ;
                              ] ;
                            sp:path2 owl:onClass ;
                          ] ;
                        sp:path2 owl:onDataRange ;
                      ] ;
                    sp:subject [
                        sp:varName "z" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:not ;
                        sp:arg1 [
                            rdf:type sp:regex ;
                            sp:arg1 [
                                rdf:type xsd:string ;
                                sp:arg1 [
                                    sp:varName "p" ;
                                  ] ;
                              ] ;
                            sp:arg2 "vocabulary" ;
                          ] ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:notExists ;
                        sp:elements (
                            [
                              sp:object "true"^^xsd:boolean ;
                              sp:predicate owl:deprecated ;
                              sp:subject [
                                  sp:varName "s" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:ne ;
                        sp:arg1 [
                            sp:varName "p" ;
                          ] ;
                        sp:arg2 owl:Thing ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "w" ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "wStr" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            rdf:type sp:coalesce ;
                                            sp:arg1 [
                                                sp:varName "wL" ;
                                              ] ;
                                            sp:arg2 [
                                                sp:varName "yStr" ;
                                              ] ;
                                          ] ;
                                        sp:arg2 "" ;
                                        sp:arg3 "\"" ;
                                      ] ;
                                    sp:arg2 "" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "-" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "'" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:variable [
                        sp:varName "predx" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "p" ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "xpobject" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:if ;
                        sp:arg1 [
                            rdf:type sp:exists ;
                            sp:elements (
                                [
                                  sp:object rdfs:Datatype ;
                                  sp:predicate rdf:type ;
                                  sp:subject [
                                      sp:varName "parent" ;
                                    ] ;
                                ]
                              ) ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:encode_for_uri ;
                                sp:arg1 [
                                    rdf:type sp:str ;
                                    sp:arg1 [
                                        sp:varName "lparent" ;
                                      ] ;
                                  ] ;
                              ] ;
                            sp:arg2 "^." ;
                            sp:arg3 "uc($0)" ;
                          ] ;
                        sp:arg3 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                sp:varName "lparent" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "lcpparent" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "s" ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "xpsubject" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "p" ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px" ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:if ;
                                    sp:arg1 [
                                        rdf:type sp:exists ;
                                        sp:elements (
                                            [
                                              sp:object rdfs:Datatype ;
                                              sp:predicate rdf:type ;
                                              sp:subject [
                                                  sp:varName "p" ;
                                                ] ;
                                            ]
                                          ) ;
                                      ] ;
                                    sp:arg2 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            rdf:type sp:encode_for_uri ;
                                            sp:arg1 [
                                                rdf:type sp:str ;
                                                sp:arg1 [
                                                    sp:varName "xpobject" ;
                                                  ] ;
                                              ] ;
                                          ] ;
                                        sp:arg2 "^." ;
                                        sp:arg3 "uc($0)" ;
                                      ] ;
                                    sp:arg3 [
                                        rdf:type sp:encode_for_uri ;
                                        sp:arg1 [
                                            rdf:type sp:str ;
                                            sp:arg1 [
                                                sp:varName "xpobject" ;
                                              ] ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpobject" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "s" ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px" ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:encode_for_uri ;
                                    sp:arg1 [
                                        rdf:type sp:str ;
                                        sp:arg1 [
                                            sp:varName "xpsubject" ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpsubject" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "w" ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px" ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:encode_for_uri ;
                                    sp:arg1 [
                                        rdf:type sp:str ;
                                        sp:arg1 [
                                            sp:varName "wStr" ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpprop" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "x" ;
                      ] ;
                    sp:predicate rdfs:subClassOf ;
                    sp:subject [
                        sp:varName "s" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "px" ;
                      ] ;
                    sp:predicate skosify:px ;
                    sp:subject skos:Concept ;
                  ]
                  [
                    sp:object owl:Restriction ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "x" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:TriplePath ;
                    sp:object [
                        sp:varName "z" ;
                      ] ;
                    sp:path [
                        rdf:type sp:AltPath ;
                        sp:path1 [
                            rdf:type sp:AltPath ;
                            sp:path1 [
                                rdf:type sp:AltPath ;
                                sp:path1 owl:someValuesFrom ;
                                sp:path2 owl:allValuesFrom ;
                              ] ;
                            sp:path2 owl:onClass ;
                          ] ;
                        sp:path2 owl:onDataRange ;
                      ] ;
                    sp:subject [
                        sp:varName "x" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "w" ;
                      ] ;
                    sp:predicate owl:onProperty ;
                    sp:subject [
                        sp:varName "x" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "wL" ;
                            ] ;
                          sp:predicate rdfs:label ;
                          sp:subject [
                              sp:varName "w" ;
                            ] ;
                        ]
                      ) ;
                  ]
                  [
                    sp:object [
                        sp:varName "y" ;
                      ] ;
                    sp:predicate owl:onProperty ;
                    sp:subject [
                        sp:varName "z" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            sp:varName "y" ;
                          ] ;
                        sp:arg2 <http://spec.edmcouncil.org/fibo/FND/Parties/Roles/playsRole> ;
                      ] ;
                  ]
                  [
                    rdf:type sp:TriplePath ;
                    sp:object [
                        sp:varName "p" ;
                      ] ;
                    sp:path [
                        rdf:type sp:AltPath ;
                        sp:path1 [
                            rdf:type sp:AltPath ;
                            sp:path1 owl:someValuesFrom ;
                            sp:path2 owl:allValuesFrom ;
                          ] ;
                        sp:path2 owl:onClass ;
                      ] ;
                    sp:subject [
                        sp:varName "z" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:notExists ;
                        sp:elements (
                            [
                              sp:object "true"^^xsd:boolean ;
                              sp:predicate owl:deprecated ;
                              sp:subject [
                                  sp:varName "p" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:notExists ;
                        sp:elements (
                            [
                              sp:object "true"^^xsd:boolean ;
                              sp:predicate owl:deprecated ;
                              sp:subject [
                                  sp:varName "s" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "w" ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "wStr" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            rdf:type sp:coalesce ;
                                            sp:arg1 [
                                                sp:varName "wL" ;
                                              ] ;
                                            sp:arg2 [
                                                sp:varName "yStr" ;
                                              ] ;
                                          ] ;
                                        sp:arg2 "" ;
                                        sp:arg3 "\"" ;
                                      ] ;
                                    sp:arg2 "" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "-" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "'" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:variable [
                        sp:varName "predx" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "p" ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "xpobject" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "s" ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "xpsubject" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "p" ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px" ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:if ;
                                    sp:arg1 [
                                        rdf:type sp:exists ;
                                        sp:elements (
                                            [
                                              sp:object rdfs:Datatype ;
                                              sp:predicate rdf:type ;
                                              sp:subject [
                                                  sp:varName "p" ;
                                                ] ;
                                            ]
                                          ) ;
                                      ] ;
                                    sp:arg2 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            rdf:type sp:encode_for_uri ;
                                            sp:arg1 [
                                                rdf:type sp:str ;
                                                sp:arg1 [
                                                    sp:varName "xpobject" ;
                                                  ] ;
                                              ] ;
                                          ] ;
                                        sp:arg2 "^." ;
                                        sp:arg3 "uc($0)" ;
                                      ] ;
                                    sp:arg3 [
                                        rdf:type sp:encode_for_uri ;
                                        sp:arg1 [
                                            rdf:type sp:str ;
                                            sp:arg1 [
                                                sp:varName "xpobject" ;
                                              ] ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpobject" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "s" ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px" ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:encode_for_uri ;
                                    sp:arg1 [
                                        rdf:type sp:str ;
                                        sp:arg1 [
                                            sp:varName "xpsubject" ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpsubject" ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "w" ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px" ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:encode_for_uri ;
                                    sp:arg1 [
                                        rdf:type sp:str ;
                                        sp:arg1 [
                                            sp:varName "wStr" ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpprop" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
      rdfs:comment """Rule 4
It looks as if some of these are daisy-chains. Here we turn restrictions into direct links.
This looks as if we have two branches, one for isPlayedBy and one for playsRole - why are they separate?
I think property paths will simplify this a lot,perhaps obviating the need for the union.""" ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "skrange" ;
              ] ;
            sp:predicate [
                sp:varName "skpprop" ;
              ] ;
            sp:subject [
                sp:varName "skdomain" ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpprop" ;
              ] ;
          ]
        ) ;
      sp:text """# Rule 13
CONSTRUCT {
    ?skpprop a owl:ObjectProperty .
    ?skdomain ?skpprop ?skrange . 
    ?skpprop rdfs:subPropertyOf skos:related .
    ?skpprop rdfs:isDefinedBy ?p .
}
WHERE {
    skos:Concept skosify:px ?px .
    ?p a owl:ObjectProperty .
    FILTER NOT EXISTS {
        ?p owl:deprecated true .
    } .
    FILTER (!regex(xsd:string(?p), \"vocabulary\")) .
    OPTIONAL {
        ?p rdfs:domain ?d .
        ?d a _:0 .
        FILTER NOT EXISTS {
            ?d owl:deprecated true .
        } .
    } .
    OPTIONAL {
        ?p rdfs:range ?r .
        ?r a _:1 .
        FILTER NOT EXISTS {
            ?r owl:deprecated true .
        } .
    } .
    BIND (REPLACE(str(?p), \"^.*(#|/)\", \"\") AS ?pStr) .
    BIND (URI(skosify:subs(?p, CONCAT(?px, ENCODE_FOR_URI(str(?pStr))))) AS ?skpprop) .
    BIND (REPLACE(str(?d), \"^.*(#|/)\", \"\") AS ?dStr) .
    BIND (URI(skosify:subs(?d, CONCAT(?px, ENCODE_FOR_URI(str(?dStr))))) AS ?skdomain) .
    BIND (REPLACE(str(?r), \"^.*(#|/)\", \"\") AS ?rStr) .
    BIND (URI(skosify:subs(?r, CONCAT(?px, ENCODE_FOR_URI(str(?rStr))))) AS ?skrange) .
}""" ;
      sp:where (
          [
            sp:object [
                sp:varName "px" ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "p" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "p" ;
                          ] ;
                      ] ;
                    sp:arg2 "vocabulary" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "d" ;
                    ] ;
                  sp:predicate rdfs:domain ;
                  sp:subject [
                      sp:varName "p" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "?0" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "d" ;
                    ] ;
                ]
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:notExists ;
                      sp:elements (
                          [
                            sp:object "true"^^xsd:boolean ;
                            sp:predicate owl:deprecated ;
                            sp:subject [
                                sp:varName "d" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "r" ;
                    ] ;
                  sp:predicate rdfs:range ;
                  sp:subject [
                      sp:varName "p" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "?1" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "r" ;
                    ] ;
                ]
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:notExists ;
                      sp:elements (
                          [
                            sp:object "true"^^xsd:boolean ;
                            sp:predicate owl:deprecated ;
                            sp:subject [
                                sp:varName "r" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "p" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "pStr" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "p" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "pStr" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skpprop" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "d" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "dStr" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "d" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "dStr" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skdomain" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "r" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "rStr" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "r" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "rStr" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skrange" ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 13" ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sksubject" ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "sksubject" ;
              ] ;
          ]
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skobject" ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "skobject" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "skobject" ;
              ] ;
            sp:predicate owl:inverseOf ;
            sp:subject [
                sp:varName "sksubject" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sksubject" ;
              ] ;
            sp:predicate owl:inverseOf ;
            sp:subject [
                sp:varName "skobject" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subject" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "sksubject" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skobject" ;
              ] ;
          ]
        ) ;
      sp:text """# Rule 10
CONSTRUCT {
    ?sksubject a owl:ObjectProperty .
    ?sksubject rdfs:subPropertyOf skos:related .
    ?skobject a owl:ObjectProperty .
    ?skobject rdfs:subPropertyOf skos:related .
    ?sksubject owl:inverseOf ?skobject .
    ?skobject owl:inverseOf ?sksubject .
    ?sksubject rdfs:isDefinedBy ?subject . 
    ?skobject rdfs:isDefinedBy ?object .
}
WHERE {
    ?subject owl:inverseOf ?object .
    FILTER NOT EXISTS {
        ?subject owl:deprecated true .
    } .
    FILTER NOT EXISTS {
        ?object owl:deprecated true .
    } .
    skos:Concept skosify:px ?px .
    FILTER (!regex(str(?subject), CONCAT(\"^\", REPLACE(?px, \"[{].[}]\", \".*\")))) .
    FILTER (!regex(str(?object), CONCAT(\"^\", REPLACE(?px, \"[{].[}]\", \".*\")))) .
    FILTER (!isBlank(?subject)) .
    OPTIONAL {
        ?subject rdfs:label ?slabel .
    } .
    OPTIONAL {
        ?object rdfs:label ?olabel .
    } .
    BIND (REPLACE(str(?subject), \"^.*(#|/)\", \"\") AS ?lsubject) .
    BIND (REPLACE(str(?object), \"^.*(#|/)\", \"\") AS ?lobject) .
    BIND (COALESCE(?slabel, ?lsubject) AS ?psubject) .
    BIND (COALESCE(?olabel, ?lobject) AS ?pobject) .
    BIND (STRLANG(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(?psubject, \"\", \"\\\"\"), \"\", \"\\\"\"), \"\", \"-\"), \"\", \"'\"), \"\", \"'\"), \"en\") AS ?titsubject) .
    BIND (STRLANG(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(?pobject, \"\", \"\\\"\"), \"\", \"\\\"\"), \"\", \"-\"), \"\", \"'\"), \"\", \"'\"), \"en\") AS ?titobject) .
    BIND (URI(skosify:subs(?subject, CONCAT(?px, ENCODE_FOR_URI(str(?lsubject))))) AS ?sksubject) .
    BIND (URI(skosify:subs(?object, CONCAT(?px, ENCODE_FOR_URI(str(?lobject))))) AS ?skobject) .
    FILTER (?sksubject != ?subject) .
    FILTER (?skobject != ?object) .
}""" ;
      sp:where (
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate owl:inverseOf ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "subject" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "object" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px" ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "subject" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px" ;
                              ] ;
                            sp:arg2 "[{].[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "object" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px" ;
                              ] ;
                            sp:arg2 "[{].[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "subject" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "slabel" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "subject" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "olabel" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "object" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "subject" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lsubject" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "object" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lobject" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:coalesce ;
                sp:arg1 [
                    sp:varName "slabel" ;
                  ] ;
                sp:arg2 [
                    sp:varName "lsubject" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "psubject" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:coalesce ;
                sp:arg1 [
                    sp:varName "olabel" ;
                  ] ;
                sp:arg2 [
                    sp:varName "lobject" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pobject" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        sp:varName "psubject" ;
                                      ] ;
                                    sp:arg2 "" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "-" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titsubject" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        sp:varName "pobject" ;
                                      ] ;
                                    sp:arg2 "" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "-" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titobject" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "subject" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lsubject" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sksubject" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "object" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lobject" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skobject" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "sksubject" ;
                  ] ;
                sp:arg2 [
                    sp:varName "subject" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "skobject" ;
                  ] ;
                sp:arg2 [
                    sp:varName "object" ;
                  ] ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 10" ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://www.w3.org/2004/02/skos/core> ;
            sp:predicate owl:imports ;
            sp:subject <https://spec.edmcouncil.org/fibo/vocabulary> ;
          ]
          [
            sp:object owl:Ontology ;
            sp:predicate rdf:type ;
            sp:subject <https://spec.edmcouncil.org/fibo/vocabulary> ;
          ]
        ) ;
      sp:text """# Rule 6
CONSTRUCT {
    <https://spec.edmcouncil.org/fibo/vocabulary> owl:imports <http://www.w3.org/2004/02/skos/core> .
    <https://spec.edmcouncil.org/fibo/vocabulary> a owl:Ontology . 
}
WHERE {

}""" ;
      sp:where () ;
      rdfs:comment "Rule 6" ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object skos:ConceptScheme ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cs" ;
              ] ;
          ]
        ) ;
      sp:text """CONSTRUCT {
    ?cs a skos:ConceptScheme .
}
WHERE { 
    skos:Concept skosify:px ?px .
    BIND (URI(REPLACE(CONCAT(?px, \"FIBO-CS\"), \"[{]M[}]|[{]D[}]|[{]O[}]\", \"core\")) AS ?cs) .
}""" ;
      sp:where (
          [
            sp:object [
                sp:varName "px" ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 "FIBO-CS" ;
                      ] ;
                    sp:arg2 "[{]M[}]|[{]D[}]|[{]O[}]" ;
                    sp:arg3 "core" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cs" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "domain" ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/isPartOf> ;
            sp:subject [
                sp:varName "c" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "domainLabel" ;
              ] ;
            sp:predicate <https://spec.edmcouncil.org/fibo/vocabulary#hasDomain> ;
            sp:subject [
                sp:varName "c" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subDomain" ;
              ] ;
            sp:predicate <https://spec.edmcouncil.org/fibo/vocabulary#hasSubDomain> ;
            sp:subject [
                sp:varName "c" ;
              ] ;
          ]
        ) ;
      sp:text """CONSTRUCT {
    ?c dcterms:isPartOf ?domain .
    ?c <https://spec.edmcouncil.org/fibo/vocabulary#hasDomain> ?domainLabel .
    ?c <https://spec.edmcouncil.org/fibo/vocabulary#hasSubDomain> ?subDomain . 
}
WHERE {
    ?c rdfs:isDefinedBy ?s .
    FILTER regex(str(?c), \"vocabulary\") .
    BIND (URI(skosify:subs(?s, \"https://spec.edmcouncil.org/fibo/{D}/About{D}/{D}Specification\")) AS ?domain) .
    BIND (skosify:subs(?s, \"{D}\") AS ?dabbrev) .
    BIND (IF((?dabbrev = \"BE\"), \"Business Entities\", IF((?dabbrev = \"FBC\"), \"Financial Business and Commerce\", IF((?dabbrev = \"IND\"), \"Indices and Indicators\", IF((?dabbrev = \"SEC\"), \"Securities\", IF((?dabbrev = \"LOAN\"), \"Loans\", IF((?dabbrev = \"DER\"), \"Derivatives\", IF((?dabbrev = \"FND\"), \"Foundations\", IF((?dabbrev = \"MD\"), \"Market Data\", IF((?dabbrev = \"CAE\"), \"Corporate Actions\", IF((?dabbrev = \"CIV\"), \"Corporate Actions\", IF((?dabbrev = \"BP\"), \"Business Process\", ?dabbrev))))))))))) AS ?domainLabel) .
    BIND (skosify:subs(?s, \"{S}\") AS ?subDomain) .
}""" ;
      sp:where (
          [
            sp:object [
                sp:varName "s" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "c" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "c" ;
                      ] ;
                  ] ;
                sp:arg2 "vocabulary" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "s" ;
                      ] ;
                    arg:a2 "https://spec.edmcouncil.org/fibo/{D}/About{D}/{D}Specification" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "domain" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type skosify:subs ;
                arg:a1 [
                    sp:varName "s" ;
                  ] ;
                arg:a2 "{D}" ;
              ] ;
            sp:variable [
                sp:varName "dabbrev" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        sp:varName "dabbrev" ;
                      ] ;
                    sp:arg2 "BE" ;
                  ] ;
                sp:arg2 "Business Entities" ;
                sp:arg3 [
                    rdf:type sp:if ;
                    sp:arg1 [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            sp:varName "dabbrev" ;
                          ] ;
                        sp:arg2 "FBC" ;
                      ] ;
                    sp:arg2 "Financial Business and Commerce" ;
                    sp:arg3 [
                        rdf:type sp:if ;
                        sp:arg1 [
                            rdf:type sp:eq ;
                            sp:arg1 [
                                sp:varName "dabbrev" ;
                              ] ;
                            sp:arg2 "IND" ;
                          ] ;
                        sp:arg2 "Indices and Indicators" ;
                        sp:arg3 [
                            rdf:type sp:if ;
                            sp:arg1 [
                                rdf:type sp:eq ;
                                sp:arg1 [
                                    sp:varName "dabbrev" ;
                                  ] ;
                                sp:arg2 "SEC" ;
                              ] ;
                            sp:arg2 "Securities" ;
                            sp:arg3 [
                                rdf:type sp:if ;
                                sp:arg1 [
                                    rdf:type sp:eq ;
                                    sp:arg1 [
                                        sp:varName "dabbrev" ;
                                      ] ;
                                    sp:arg2 "LOAN" ;
                                  ] ;
                                sp:arg2 "Loans" ;
                                sp:arg3 [
                                    rdf:type sp:if ;
                                    sp:arg1 [
                                        rdf:type sp:eq ;
                                        sp:arg1 [
                                            sp:varName "dabbrev" ;
                                          ] ;
                                        sp:arg2 "DER" ;
                                      ] ;
                                    sp:arg2 "Derivatives" ;
                                    sp:arg3 [
                                        rdf:type sp:if ;
                                        sp:arg1 [
                                            rdf:type sp:eq ;
                                            sp:arg1 [
                                                sp:varName "dabbrev" ;
                                              ] ;
                                            sp:arg2 "FND" ;
                                          ] ;
                                        sp:arg2 "Foundations" ;
                                        sp:arg3 [
                                            rdf:type sp:if ;
                                            sp:arg1 [
                                                rdf:type sp:eq ;
                                                sp:arg1 [
                                                    sp:varName "dabbrev" ;
                                                  ] ;
                                                sp:arg2 "MD" ;
                                              ] ;
                                            sp:arg2 "Market Data" ;
                                            sp:arg3 [
                                                rdf:type sp:if ;
                                                sp:arg1 [
                                                    rdf:type sp:eq ;
                                                    sp:arg1 [
                                                        sp:varName "dabbrev" ;
                                                      ] ;
                                                    sp:arg2 "CAE" ;
                                                  ] ;
                                                sp:arg2 "Corporate Actions" ;
                                                sp:arg3 [
                                                    rdf:type sp:if ;
                                                    sp:arg1 [
                                                        rdf:type sp:eq ;
                                                        sp:arg1 [
                                                            sp:varName "dabbrev" ;
                                                          ] ;
                                                        sp:arg2 "CIV" ;
                                                      ] ;
                                                    sp:arg2 "Corporate Actions" ;
                                                    sp:arg3 [
                                                        rdf:type sp:if ;
                                                        sp:arg1 [
                                                            rdf:type sp:eq ;
                                                            sp:arg1 [
                                                                sp:varName "dabbrev" ;
                                                              ] ;
                                                            sp:arg2 "BP" ;
                                                          ] ;
                                                        sp:arg2 "Business Process" ;
                                                        sp:arg3 [
                                                            sp:varName "dabbrev" ;
                                                          ] ;
                                                      ] ;
                                                  ] ;
                                              ] ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "domainLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type skosify:subs ;
                arg:a1 [
                    sp:varName "s" ;
                  ] ;
                arg:a2 "{S}" ;
              ] ;
            sp:variable [
                sp:varName "subDomain" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "note" ;
              ] ;
            sp:predicate skos:definition ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "x" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
        ) ;
      sp:text """# Rule 8a
CONSTRUCT {
    ?skentity skos:definition ?note .
    ?skentity rdfs:isDefinedBy ?x .
}
WHERE {
    skos:Concept skosify:px ?px .
    ?x dcterms:description ?it .
    FILTER NOT EXISTS {
        ?x a owl:NamedIndividual .
    } .
    FILTER NOT EXISTS {
        ?x owl:deprecated true .
    } .
    BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(xsd:string(?it), \"\", \"\\\"\"), \"\", \"\\\"\"), \"\", \"-\"), \"\", \"'\"), \"\", \"'\") AS ?note) .
    BIND (CONCAT(\"Copy values for \", REPLACE(str(?thep), \"^.*(#|/)\", \"\"), \"(08)\") AS ?hist) .
    BIND (REPLACE(str(?x), \"^.*(#|/)\", \"\") AS ?lentity) .
    BIND (REPLACE(REPLACE(str(?x), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?module) . 
    BIND (IF(EXISTS {
        ?x a rdfs:Datatype .
    }, REPLACE(str(?lentity), \"^.\", \"uc($0)\"), str(?lentity)) AS ?lencode) .
    BIND (URI(skosify:subs(?lentity, CONCAT(?px, ENCODE_FOR_URI(?lencode)))) AS ?skentity) .
    FILTER (?x != ?skentity) .
    FILTER (!regex(str(?x), CONCAT(\"^\", REPLACE(?px, \"[{].[}]\", \".*\")))) .
    FILTER (!regex(xsd:string(?x), \"vocabulary\")) .
    FILTER NOT EXISTS {
        ?x a sm:SpecificationVersion .
    } .
    ?x a ?type .
    FILTER (?type NOT IN (owl:AnnotationProperty, owl:DatatypeProperty, owl:FunctionalProperty)) .
}""" ;
      sp:where (
          [
            sp:object [
                sp:varName "px" ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            sp:object [
                sp:varName "it" ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/description> ;
            sp:subject [
                sp:varName "x" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object owl:NamedIndividual ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "x" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type xsd:string ;
                                    sp:arg1 [
                                        sp:varName "it" ;
                                      ] ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "note" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "Copy values for " ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "thep" ;
                          ] ;
                      ] ;
                    sp:arg2 "^.*(#|/)" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 "(08)" ;
              ] ;
            sp:variable [
                sp:varName "hist" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "x" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x" ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "module" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:exists ;
                    sp:elements (
                        [
                          sp:object rdfs:Datatype ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "x" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "lentity" ;
                          ] ;
                      ] ;
                    sp:arg2 "^." ;
                    sp:arg3 "uc($0)" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "lentity" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lencode" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "lentity" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                sp:varName "lencode" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "x" ;
                  ] ;
                sp:arg2 [
                    sp:varName "skentity" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px" ;
                              ] ;
                            sp:arg2 "[{].[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "x" ;
                          ] ;
                      ] ;
                    sp:arg2 "vocabulary" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object sm:SpecificationVersion ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    sp:varName "type" ;
                  ] ;
                sp:arg2 owl:AnnotationProperty ;
                sp:arg3 owl:DatatypeProperty ;
                sp:arg4 owl:FunctionalProperty ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 8a" ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "note" ;
              ] ;
            sp:predicate [
                sp:varName "thep" ;
              ] ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "x" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity" ;
              ] ;
          ]
        ) ;
      sp:text """# Rule 8
CONSTRUCT {
    ?skentity ?thep ?note .
    ?skentity rdfs:isDefinedBy ?x .
}
WHERE {
    skos:Concept skosify:px ?px .
    ?x ?thep1 ?it .
    FILTER NOT EXISTS {
        ?x owl:deprecated true .
    } .
    BIND (REPLACE(str(?thep1), \"^.*(#|/)\", \"\") AS ?lnp1) . 
    FILTER (?lnp1 IN (\"changeNote\", \"definition\", \"historyNote\", \"editorialNote\", \"example\", \"note\", \"scopeNote\", \"adaptedFrom\", \"definitionOrigin\", \"synonym\", \"explanatoryNote\")) .
    BIND (IF((?lnp1 = \"synonym\"), skos:altLabel, ?thep1) AS ?thep) .
    BIND (CONCAT(\"This is rule 8 \", xsd:string(?thep1)) AS ?comment) .
    FILTER NOT EXISTS {
        ?x a owl:NamedIndividual .
    } .
    BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(xsd:string(?it), \"\", \"\\\"\"), \"\", \"\\\"\"), \"\", \"-\"), \"\", \"'\"), \"\", \"'\") AS ?note) .
    BIND (CONCAT(\"Copy values for \", REPLACE(str(?thep), \"^.*(#|/)\", \"\"), \"(08)\") AS ?hist) .
    BIND (REPLACE(str(?x), \"^.*(#|/)\", \"\") AS ?lentity) .
    BIND (REPLACE(REPLACE(str(?x), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?module) .
    BIND (IF(EXISTS {
        ?x a rdfs:Datatype .
    }, REPLACE(ENCODE_FOR_URI(str(?lentity)), \"^.\", \"uc($0)\"), ENCODE_FOR_URI(str(?lentity))) AS ?lencode) .
    BIND (URI(skosify:subs(?x, CONCAT(?px, ?lencode))) AS ?skentity) .
    FILTER (?x != ?skentity) .
    FILTER (!regex(str(?x), CONCAT(\"^\", REPLACE(?px, \"[{]M[}]|[{]D[}]|[{]O[}]\", \".*\")))) .
    FILTER (!regex(str(?x), \"vocabulary\")) .
    FILTER NOT EXISTS {
        ?x a sm:SpecificationVersion .
    } .
    ?x a ?type .
    FILTER (?type NOT IN (owl:AnnotationProperty, owl:DatatypeProperty, owl:FunctionalProperty)) .
}""" ;
      sp:where (
          [
            sp:object [
                sp:varName "px" ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            sp:object [
                sp:varName "it" ;
              ] ;
            sp:predicate [
                sp:varName "thep1" ;
              ] ;
            sp:subject [
                sp:varName "x" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "x" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "thep1" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lnp1" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    sp:varName "lnp1" ;
                  ] ;
                sp:arg10 "definitionOrigin" ;
                sp:arg11 "synonym" ;
                sp:arg12 "explanatoryNote" ;
                sp:arg2 "changeNote" ;
                sp:arg3 "definition" ;
                sp:arg4 "historyNote" ;
                sp:arg5 "editorialNote" ;
                sp:arg6 "example" ;
                sp:arg7 "note" ;
                sp:arg8 "scopeNote" ;
                sp:arg9 "adaptedFrom" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        sp:varName "lnp1" ;
                      ] ;
                    sp:arg2 "synonym" ;
                  ] ;
                sp:arg2 skos:altLabel ;
                sp:arg3 [
                    sp:varName "thep1" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "thep" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "This is rule 8 " ;
                sp:arg2 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "thep1" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "comment" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object owl:NamedIndividual ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type xsd:string ;
                                    sp:arg1 [
                                        sp:varName "it" ;
                                      ] ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "note" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "Copy values for " ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "thep" ;
                          ] ;
                      ] ;
                    sp:arg2 "^.*(#|/)" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 "(08)" ;
              ] ;
            sp:variable [
                sp:varName "hist" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "x" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x" ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "module" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:exists ;
                    sp:elements (
                        [
                          sp:object rdfs:Datatype ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "x" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:encode_for_uri ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "lentity" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "^." ;
                    sp:arg3 "uc($0)" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:encode_for_uri ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "lentity" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lencode" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "x" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "lencode" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "x" ;
                  ] ;
                sp:arg2 [
                    sp:varName "skentity" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px" ;
                              ] ;
                            sp:arg2 "[{]M[}]|[{]D[}]|[{]O[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x" ;
                          ] ;
                      ] ;
                    sp:arg2 "vocabulary" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object sm:SpecificationVersion ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    sp:varName "type" ;
                  ] ;
                sp:arg2 owl:AnnotationProperty ;
                sp:arg3 owl:DatatypeProperty ;
                sp:arg4 owl:FunctionalProperty ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 8" ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "skparent" ;
              ] ;
            sp:predicate skos:broader ;
            sp:subject [
                sp:varName "skchild" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "child" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skchild" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parent" ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skparent" ;
              ] ;
          ]
        ) ;
      sp:text """# Rule 7
CONSTRUCT {
    ?skchild skos:broader ?skparent .
    ?skchild rdfs:isDefinedBy ?child .
    ?skparent rdfs:isDefinedBy ?parent .
}
WHERE {
    ?child rdfs:subClassOf ?parent .
    FILTER regex(xsd:string(?parent), \"edmcouncil\") . 
    FILTER NOT EXISTS {
        ?child owl:deprecated true .
    } .
    FILTER (?parent != owl:Thing) .
    FILTER (?parent != skos:Concept) .
    FILTER NOT EXISTS {
        ?parent owl:deprecated true .
    } .
    skos:Concept skosify:px ?px .
    FILTER (!isBlank(?parent)) .
    BIND (REPLACE(str(?parent), \"^.*(#|/)\", \"\") AS ?lparent) .
    BIND (REPLACE(str(?child), \"^.*(#|/)\", \"\") AS ?lchild) .
    BIND (IF(EXISTS {
        ?parent a rdfs:Datatype .
    }, REPLACE(ENCODE_FOR_URI(str(?lparent)), \"^.\", \"uc($0)\"), ENCODE_FOR_URI(?lparent)) AS ?lcpparent) .
    BIND (URI(skosify:subs(?parent, CONCAT(?px, ?lcpparent))) AS ?skparent) .
    BIND (URI(skosify:subs(?child, CONCAT(?px, ENCODE_FOR_URI(str(?lchild))))) AS ?skchild) .
}""" ;
      sp:where (
          [
            sp:object [
                sp:varName "parent" ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "child" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "parent" ;
                      ] ;
                  ] ;
                sp:arg2 "edmcouncil" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "child" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "parent" ;
                  ] ;
                sp:arg2 owl:Thing ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "parent" ;
                  ] ;
                sp:arg2 skos:Concept ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "parent" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px" ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "parent" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "parent" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lparent" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "child" ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lchild" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:exists ;
                    sp:elements (
                        [
                          sp:object rdfs:Datatype ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "parent" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:encode_for_uri ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "lparent" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "^." ;
                    sp:arg3 "uc($0)" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:encode_for_uri ;
                    sp:arg1 [
                        sp:varName "lparent" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lcpparent" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "parent" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "lcpparent" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skparent" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "child" ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px" ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lchild" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skchild" ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 7" ;
    ] ;
.
skos:Concept
  skosify:domain "be" ;
  skosify:domain "der" ;
  skosify:domain "fbc" ;
  skosify:domain "fnd" ;
  skosify:domain "ind" ;
  skosify:domain "sec" ;
  skosify:px "https://spec.edmcouncil.org/fibo/{D}/vocabulary#" ;
.
